@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Sections
@inject NavigationManager NavigationManager

@* Mud Blazor *@
@* Required *@
<MudThemeProvider @ref="@_mudThemeProvider" Theme="@Theme" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />

<MudPaper Class="mud-elevation-4 py-2 px-5 rounded mud-theme-surface" Style="display: flex; position: relative; z-index:1">
    <MudButton Variant="Variant.Text" OnClick="OnSiteNameClick">Paul Maget - Portfolio</MudButton>
    <div style="flex:1"></div>
    <div style="flex-basis:100px">
        <MudMenu Icon="@SelectedModeIcon"
        Color="Color.Primary"
        AriaLabel="Open user menu">
            <MudMenuItem Icon="@Icons.Material.Filled.LightMode" OnClick="x => OnSelectedModeChanged(SelectedMode.Light)" />
            <MudMenuItem Icon="@Icons.Material.Filled.DarkMode" OnClick="x => OnSelectedModeChanged(SelectedMode.Dark)" />
            <MudMenuItem Icon="@Icons.Material.Filled.AutoMode" OnClick="x => OnSelectedModeChanged(SelectedMode.Auto)" />
        </MudMenu>
    </div>
</MudPaper>

<div style="position: relative">
    <div class="layout-surface">
        <MudBreadcrumbs Items="@_breadcrumbs" Class="" Style="position: absolute; padding: 10px" />
    </div>
    <SectionOutlet SectionName="hero-frame"/>

    <div class="layout-surface mud-elevation-2 py-15 px-15">
        @Body
    </div>
</div>

@code{
    MudTheme Theme = new();

    SelectedMode selectedMode = SelectedMode.Auto;

    private MudThemeProvider _mudThemeProvider = new();
    private bool _isDarkMode;

    private List<BreadcrumbItem> _breadcrumbs
    {
        get
        {
            List<BreadcrumbItem> items = [];

            items.Add(new("Accueil", "/"));

            string[] path = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "").Split('/');

            foreach (string link in path)
            {
                if (link.Length < 2)
                    continue;

                string visualName = link.Substring(0, 1).ToUpper() + link.Substring(1);
                string href = items.Last().Href + $"{link}/";

                items.Add(new(visualName, href));
            }
            return items;
        }
    }

    private string SelectedModeIcon => selectedMode switch
    {
		SelectedMode.Light => Icons.Material.Filled.LightMode,
		SelectedMode.Dark => Icons.Material.Filled.DarkMode,
		SelectedMode.Auto => Icons.Material.Filled.AutoMode,
		_ => Icons.Material.Filled.AutoMode
	};

    public enum SelectedMode
    {
        Light,
        Dark,
        Auto
    }

    protected override void OnInitialized()
    {
        Theme.PaletteLight = new()
        {
            Primary = Colors.DeepPurple.Lighten1,
            Secondary = Colors.Teal.Lighten1,
            Tertiary = Colors.Amber.Default,

            Background = Colors.DeepPurple.Lighten5
        };
        Theme.PaletteDark = new()
		{
            Secondary = Colors.Teal.Lighten1,
            Background = Colors.Gray.Darken4
		};
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = selectedMode switch
            {
                SelectedMode.Dark => true,
                SelectedMode.Light => false,
                SelectedMode.Auto => await _mudThemeProvider.GetSystemPreference(),
                _ => false
            };
            StateHasChanged();
        }
    }

    private async Task OnSelectedModeChanged(SelectedMode mode)
    {
        selectedMode = mode;
        _isDarkMode = selectedMode switch
        {
            SelectedMode.Dark => true,
            SelectedMode.Light => false,
            SelectedMode.Auto => await _mudThemeProvider.GetSystemPreference(),
            _ => false
        };
        StateHasChanged();
    }

    private void OnSiteNameClick()
    {
        NavigationManager.NavigateTo("/");
    }
}